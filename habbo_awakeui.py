# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'habboAwake.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import json
import pyautogui as pg
import time
from datetime import datetime
from threading import Event


class UiMainWindow(QtWidgets.QDialog):
    def __init__(self, start_time=5, between_time=300, travel_time=2):
        super().__init__()
        self.worker = None
        self.__start_time = start_time
        self.__between_time = between_time
        self.__travel_time = travel_time

    def setup_ui(self, main_windows):
        main_windows.setObjectName("main_windows")
        main_windows.resize(390, 220)
        main_windows.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(main_windows)
        self.centralwidget.setObjectName("centralwidget")
        self.tab_widget = QtWidgets.QTabWidget(self.centralwidget)
        self.tab_widget.setGeometry(QtCore.QRect(20, 10, 361, 191))
        self.tab_widget.setUsesScrollButtons(True)
        self.tab_widget.setObjectName("tab_widget")
        self.main_tab = QtWidgets.QWidget()
        self.main_tab.setObjectName("main_tab")
        self.state_label = QtWidgets.QLabel(self.main_tab)
        self.state_label.setGeometry(QtCore.QRect(10, 20, 71, 21))
        self.state_label.setObjectName("state_label")
        self.cycle_label = QtWidgets.QLabel(self.main_tab)
        self.cycle_label.setGeometry(QtCore.QRect(10, 50, 71, 21))
        self.cycle_label.setObjectName("cycle_label")
        self.last_label = QtWidgets.QLabel(self.main_tab)
        self.last_label.setGeometry(QtCore.QRect(10, 80, 71, 21))
        self.last_label.setObjectName("last_label")
        self.next_label = QtWidgets.QLabel(self.main_tab)
        self.next_label.setGeometry(QtCore.QRect(10, 110, 71, 21))
        self.next_label.setObjectName("next_label")
        self.next_edit = QtWidgets.QLineEdit(self.main_tab)
        self.next_edit.setEnabled(True)
        self.next_edit.setGeometry(QtCore.QRect(110, 110, 113, 20))
        self.next_edit.setReadOnly(True)
        self.next_edit.setObjectName("next_edit")
        self.last_edit = QtWidgets.QLineEdit(self.main_tab)
        self.last_edit.setEnabled(True)
        self.last_edit.setGeometry(QtCore.QRect(110, 80, 113, 20))
        self.last_edit.setReadOnly(True)
        self.last_edit.setObjectName("last_edit")
        self.cycle_edit = QtWidgets.QLineEdit(self.main_tab)
        self.cycle_edit.setEnabled(True)
        self.cycle_edit.setGeometry(QtCore.QRect(110, 50, 113, 20))
        self.cycle_edit.setReadOnly(True)
        self.cycle_edit.setObjectName("cycle_edit")
        self.state_edit = QtWidgets.QLineEdit(self.main_tab)
        self.state_edit.setEnabled(True)
        self.state_edit.setGeometry(QtCore.QRect(110, 20, 113, 20))
        self.state_edit.setReadOnly(True)
        self.state_edit.setObjectName("state_edit")
        self.start_button = QtWidgets.QPushButton(self.main_tab)
        self.start_button.setGeometry(QtCore.QRect(270, 20, 75, 23))
        self.start_button.setObjectName("start_button")
        self.start_button.clicked.connect(self.start_awake)
        self.stop_button = QtWidgets.QPushButton(self.main_tab)
        self.stop_button.setGeometry(QtCore.QRect(270, 50, 75, 23))
        self.stop_button.setObjectName("stop_button")
        self.stop_button.clicked.connect(lambda: self.worker.quit())
        self.tab_widget.addTab(self.main_tab, "")
        self.config_tab = QtWidgets.QWidget()
        self.config_tab.setObjectName("config_tab")
        self.start_input = QtWidgets.QSpinBox(self.config_tab)
        self.start_input.setGeometry(QtCore.QRect(180, 20, 71, 21))
        self.start_input.setMaximum(999999999)
        self.start_input.setProperty("value", self.__start_time)
        self.start_input.setObjectName("start_input")
        self.start_label = QtWidgets.QLabel(self.config_tab)
        self.start_label.setGeometry(QtCore.QRect(10, 20, 151, 21))
        self.start_label.setObjectName("start_label")
        self.between_label = QtWidgets.QLabel(self.config_tab)
        self.between_label.setGeometry(QtCore.QRect(10, 50, 161, 21))
        self.between_label.setObjectName("between_label")
        self.between_input = QtWidgets.QSpinBox(self.config_tab)
        self.between_input.setGeometry(QtCore.QRect(180, 50, 71, 21))
        self.between_input.setMaximum(999999999)
        self.between_input.setProperty("value", self.__between_time)
        self.between_input.setObjectName("between_input")
        self.travel_label = QtWidgets.QLabel(self.config_tab)
        self.travel_label.setGeometry(QtCore.QRect(10, 80, 161, 21))
        self.travel_label.setObjectName("travel_label")
        self.travel_input = QtWidgets.QSpinBox(self.config_tab)
        self.travel_input.setGeometry(QtCore.QRect(180, 80, 71, 21))
        self.travel_input.setMaximum(999999999)
        self.travel_input.setProperty("value", self.__travel_time)
        self.travel_input.setObjectName("travel_input")
        self.save_button = QtWidgets.QPushButton(self.config_tab)
        self.save_button.setGeometry(QtCore.QRect(270, 20, 75, 23))
        self.save_button.setObjectName("save_button")
        self.save_button.clicked.connect(self.save_config)
        self.default_button = QtWidgets.QPushButton(self.config_tab)
        self.default_button.setGeometry(QtCore.QRect(270, 50, 75, 23))
        self.default_button.setObjectName("default_button")
        self.default_button.clicked.connect(self.default_config)
        self.assign_box = QtWidgets.QGroupBox(self.config_tab)
        self.assign_box.setGeometry(QtCore.QRect(10, 110, 331, 51))
        self.assign_box.setObjectName("assign_box")
        self.position1_button = QtWidgets.QPushButton(self.assign_box)
        self.position1_button.setGeometry(QtCore.QRect(10, 20, 75, 23))
        self.position1_button.setObjectName("position1_button")
        self.position1_button.clicked.connect(lambda: self.record_position(1))
        self.position2_button = QtWidgets.QPushButton(self.assign_box)
        self.position2_button.setGeometry(QtCore.QRect(90, 20, 75, 23))
        self.position2_button.setObjectName("position2_button")
        self.position2_button.clicked.connect(lambda: self.record_position(2))
        self.position3_button = QtWidgets.QPushButton(self.assign_box)
        self.position3_button.setGeometry(QtCore.QRect(170, 20, 75, 23))
        self.position3_button.setObjectName("position3_button")
        self.position3_button.clicked.connect(lambda: self.record_position(3))
        self.position4_button = QtWidgets.QPushButton(self.assign_box)
        self.position4_button.setGeometry(QtCore.QRect(250, 20, 75, 23))
        self.position4_button.setObjectName("position4_button")
        self.position4_button.clicked.connect(lambda: self.record_position(4))
        self.tab_widget.addTab(self.config_tab, "")
        main_windows.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(main_windows)
        self.statusbar.setObjectName("statusbar")
        main_windows.setStatusBar(self.statusbar)

        self.retranslate_ui(main_windows)
        self.tab_widget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(main_windows)

    def get_start(self):
        return int(self.start_input.text())

    def get_between(self):
        return int(self.between_input.text())

    def get_travel(self):
        return int(self.travel_input.text())

    def save_config(self):
        with open("config.json", "r") as config_file:
            configs = json.load(config_file)
        configs["timeConfig"]["startTime"] = self.get_start()
        configs["timeConfig"]["betweenTime"] = self.get_between()
        configs["timeConfig"]["travelTime"] = self.get_travel()
        with open("config.json", "w") as config_file:
            json.dump(configs, config_file, indent=2)

    def default_config(self):
        default_start = 5
        default_between = 300
        default_travel = 2
        self.start_input.setProperty("value", default_start)
        self.between_input.setProperty("value", default_between)
        self.travel_input.setProperty("value", default_travel)

    def record_position(self, position_number):
        with open("config.json", "r") as config_file:
            configs = json.load(config_file)
        QtWidgets.QMessageBox.information(self, "Done!", 'Recording position 3 seconds after pressing "OK"')
        time.sleep(3)
        record = pg.position()
        configs["positions"][f"position{position_number}"]["x"] = record.x
        configs["positions"][f"position{position_number}"]["y"] = record.y
        with open("config.json", "w") as config_file:
            json.dump(configs, config_file, indent=2)
        print(record)
        print(f"Position {position_number} recorded")

    def start_awake(self):
        s = self.get_start()
        b = self.get_between()
        t = self.get_travel()
        self.worker = ClickThread(start=s,
                                  between=b,
                                  travel=t,
                                  state_edit=self.state_edit,
                                  cycle_edit=self.cycle_edit,
                                  last_edit=self.last_edit,
                                  next_edit=self.next_edit)
        self.worker.start()

    def retranslate_ui(self, main_windows):
        _translate = QtCore.QCoreApplication.translate
        main_windows.setWindowTitle(_translate("main_windows", "Habbo Awake"))
        self.state_label.setText(_translate("main_windows", "State:"))
        self.cycle_label.setText(_translate("main_windows", "Cycle: "))
        self.last_label.setText(_translate("main_windows", "Last cycle at"))
        self.next_label.setText(_translate("main_windows", "Next cycle in"))
        self.next_edit.setText(_translate("main_windows", "0 seconds"))
        self.last_edit.setText(_translate("main_windows", "00:00:00"))
        self.cycle_edit.setText(_translate("main_windows", "0"))
        self.state_edit.setText(_translate("main_windows", "STOPPED"))
        self.state_edit.setStyleSheet("background: lightgray")
        self.start_button.setText(_translate("main_windows", "Start"))
        self.stop_button.setText(_translate("main_windows", "Stop"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.main_tab), _translate("main_windows", "Main"))
        self.start_label.setText(_translate("main_windows", "Time to start (seg)"))
        self.between_label.setText(_translate("main_windows", "Time between cycles (seg)"))
        self.travel_label.setText(_translate("main_windows", "Travel time (seg)"))
        self.save_button.setText(_translate("main_windows", "Save"))
        self.default_button.setText(_translate("main_windows", "Default"))
        self.assign_box.setTitle(_translate("main_windows", "Assign"))
        self.position1_button.setText(_translate("main_windows", "Position 1"))
        self.position2_button.setText(_translate("main_windows", "Position 2"))
        self.position3_button.setText(_translate("main_windows", "Position 3"))
        self.position4_button.setText(_translate("main_windows", "Position 4"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.config_tab), _translate("main_windows", "Config"))


class ClickThread(QtCore.QThread):
    def __init__(self, start, between, travel, state_edit, cycle_edit, last_edit, next_edit):
        super().__init__()
        self.__start = start
        self.__between = between
        self.__travel = travel
        self.__state_edit = state_edit
        self.__cycle_edit = cycle_edit
        self.__last_edit = last_edit
        self.__next_edit = next_edit

    def run(self) -> None:
        with open("config.json", "r") as config_file:
            configs = json.load(config_file)
        pos1 = configs["positions"]["position1"]
        pos2 = configs["positions"]["position2"]
        pos3 = configs["positions"]["position3"]
        pos4 = configs["positions"]["position4"]
        self.__state_edit.setText("STARTING")
        self.__state_edit.setStyleSheet("background: lightblue;")
        Event().wait(self.__start)
        cycle = 1
        while True:
            self.__cycle_edit.setText(f"{cycle}")
            self.__last_edit.setText(self.get_time())
            self.__state_edit.setText("RUNNING")
            self.__state_edit.setStyleSheet("background: lightgreen;")
            self.__next_edit.setText("executing")
            self.move(pos1)
            self.move(pos2)
            self.move(pos3)
            self.move(pos4)
            for i in range(self.__between):
                self.__next_edit.setText(f"{self.__between - i} seconds")
                self.__state_edit.setText("WAITING")
                self.__state_edit.setStyleSheet("background: yellow;")
                Event().wait(1)
            cycle += 1

    def move(self, position):
        pg.moveTo(position["x"], position["y"], self.__travel)
        pg.click()

    @staticmethod
    def get_time():
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        return current_time
